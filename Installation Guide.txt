Amazon Product Intelligence Suite – Windows Installation Guide
==============================================================

This document walks you through setting up, running, and packaging the Amazon Product Intelligence Suite desktop application on Windows. It assumes no prior experience with Go or the Fyne toolkit and focuses on a clean Windows 10/11 64-bit system.

------------------------------------------------------------
1. What You Will Build
------------------------------------------------------------
You will compile the graphical desktop client found in this repository (folder `cmd/app`) into a Windows executable and, optionally, wrap it in an installer using Inno Setup. The application allows you to perform product lookups, keyword research, and other Amazon intelligence workflows.

------------------------------------------------------------
2. System Requirements
------------------------------------------------------------
* Windows 10 or 11 (64-bit).
* An administrator account (needed for installing toolchains).
* At least 4 GB free disk space.
* Reliable internet access (to download dependencies and make API requests during testing).

------------------------------------------------------------
3. Install the Required Tools
------------------------------------------------------------
Follow each subsection in order. You only need to do this once per machine.

3.1 Install Go 1.21 or newer
----------------------------
1. Visit <https://go.dev/dl/>.
2. Download the `go1.21.x.windows-amd64.msi` installer.
3. Run the MSI, accept the defaults, and finish the installation.
4. Open a new **PowerShell** window and verify the install:
   ```powershell
   go version
   ```
   You should see output like `go version go1.21.x windows/amd64`.

3.2 Install Git (optional but recommended)
-----------------------------------------
1. Download Git for Windows from <https://git-scm.com/download/win>.
2. Run the installer and accept the defaults. This makes it easy to clone and update the repository.

3.3 Install MSYS2 and the Fyne build prerequisites
--------------------------------------------------
Fyne relies on a C compiler and supporting libraries on Windows. MSYS2 supplies them.

1. Download MSYS2 from <https://www.msys2.org/> (choose the `msys2-x86_64-*.exe` installer).
2. Run the installer and keep the default path (e.g., `C:\msys64`). When the installer finishes, let it launch the MSYS2 shell.
3. In the MSYS2 window, update the core packages:
   ```bash
   pacman -Syu
   ```
   If prompted to close the window after the update, close it and reopen **MSYS2 UCRT64** from the Start menu.
4. Install the toolchain, pkg-config, and GTK3 libraries required by Fyne:
   ```bash
   pacman -S --needed \
       mingw-w64-ucrt-x86_64-toolchain \
       mingw-w64-ucrt-x86_64-pkg-config \
       mingw-w64-ucrt-x86_64-gtk3
   ```
5. Add the UCRT64 binaries to your Windows PATH so Go can find the compiler:
   * Open **Start → Settings → System → About → Advanced system settings**.
   * Click **Environment Variables**.
   * Under **System variables**, select `Path` → **Edit**.
   * Add `C:\msys64\ucrt64\bin` and `C:\msys64\usr\bin`, then click **OK** on all dialogs.
6. Close any open PowerShell windows and open a fresh one so the PATH changes apply.

3.4 Install the Fyne command-line tool
--------------------------------------
In a new PowerShell window:
```powershell
setx GOPATH "$([Environment]::GetFolderPath('MyDocuments'))\go"
$env:GOPATH = "$([Environment]::GetFolderPath('MyDocuments'))\go"
$env:PATH = "$env:PATH;$env:GOPATH\bin"
go install fyne.io/fyne/v2/cmd/fyne@latest
```
The first two lines ensure Go’s workspace exists and is on your PATH for the current session. After running these commands, verify the install:
```powershell
fyne version
```
If PowerShell reports that `fyne` is not recognized, close and reopen PowerShell and try again.

3.5 Install Inno Setup 6 (for packaging an installer)
-----------------------------------------------------
1. Download Inno Setup from <https://jrsoftware.org/isinfo.php>.
2. Run the installer and accept the defaults.
3. Launch **Inno Setup Compiler** from the Start menu once to ensure it opens correctly.

------------------------------------------------------------
4. Obtain the Project Files
------------------------------------------------------------
Open PowerShell and choose a folder where you want the project to live (e.g., `C:\Projects`). Then run one of the following:

*Clone with Git (recommended)*
```powershell
cd C:\Projects
git clone https://github.com/umar02/Umar-kdp-product-api.git
cd Umar-kdp-product-api
```

*Download the ZIP*
1. Visit the repository page in your browser.
2. Click **Code → Download ZIP**.
3. Extract the ZIP (right-click → Extract All…) into a folder, then open PowerShell and `cd` into the extracted directory.

------------------------------------------------------------
5. Prepare the Go Dependencies
------------------------------------------------------------
1. Ensure you are in the project root (the folder containing `go.mod`).
2. Set `CGO_ENABLED` and run the dependency download once:
   ```powershell
   $env:CGO_ENABLED = "1"
   go mod download
   ```
   This command fetches all Go packages referenced by the project.

------------------------------------------------------------
6. Run the Desktop Application Locally
------------------------------------------------------------
1. Still inside the project root, launch the UI:
   ```powershell
   $env:CGO_ENABLED = "1"
   go run ./cmd/app
   ```
2. After a short build, a window titled **Amazon Product Intelligence** should appear.
3. Use the various tabs to verify that the interface works. Close the PowerShell window or press **Ctrl+C** in the terminal when you are finished testing.

Troubleshooting tips:
* If you see errors about missing GTK libraries or C compiler, double-check that the MSYS2 `ucrt64\bin` directory is in your PATH and reopen PowerShell.
* Network-related errors in the UI usually stem from Amazon throttling requests; retry with fewer simultaneous queries.

------------------------------------------------------------
7. Build a Stand-alone Windows Executable
------------------------------------------------------------
To produce a 64-bit `.exe` file:
```powershell
$env:CGO_ENABLED = "1"
go build -o "Amazon Product Intelligence.exe" ./cmd/app
```
The executable will appear in the project root. Double-clicking it should launch the same UI as `go run` did.

Optional: Package with Fyne (embeds icons and metadata)
```powershell
$env:CGO_ENABLED = "1"
fyne package `
  -os windows `
  -icon assets/app.png `
  -name "Amazon Product Intelligence" `
  -appID com.amazon.intelligence `
  -sourceDir cmd/app
```
This command reads metadata from `cmd/app` and produces `Amazon Product Intelligence.exe` inside the project root. If you supply both `assets/app.png` and `assets/app.ico`, Fyne will embed the icon in the executable. (The repository includes placeholder files—replace them with your own artwork if desired.)

------------------------------------------------------------
8. Build an Installer with Inno Setup (Optional)
------------------------------------------------------------
1. Ensure `Amazon Product Intelligence.exe` exists in the project root (copy or rename your build if necessary).
2. Launch **Inno Setup Compiler**.
3. Click **File → Open…** and choose `installer\amazon-product-scraper.iss` from this repository.
4. Review the script. The defaults place the app in `C:\Program Files\AmazonProductIntelligence` and create Start Menu/desktop shortcuts.
5. Click **Build → Compile**. When prompted, choose a destination folder or accept the default.
6. After a successful build, Inno Setup will display `amazon-product-intelligence-setup.exe` in the project’s `installer` folder.
7. Double-click the generated installer to test the installation flow on your machine.

Optional adjustments before compiling:
* Update `AppVersion` or `AppPublisher` in the `.iss` file to match your branding.
* If you changed the executable name, update the `Source` line under `[Files]` accordingly.

------------------------------------------------------------
9. Verify the Installation
------------------------------------------------------------
1. Run the generated installer and follow the prompts.
2. After installation, launch **Amazon Product Intelligence** from the Start menu or the desktop shortcut.
3. Confirm that the application opens and that each tab can perform network requests.
4. To uninstall, open **Settings → Apps → Installed Apps**, find **Amazon Product Intelligence**, and click **Uninstall**.

------------------------------------------------------------
10. Keeping the Project Up to Date
------------------------------------------------------------
* To pull code updates (Git clone):
  ```powershell
  cd C:\Projects\Umar-kdp-product-api
  git pull
  ```
  Re-run `go mod download` if new dependencies were added.
* Rebuild the executable and installer whenever you update the source code.

------------------------------------------------------------
11. Troubleshooting Checklist
------------------------------------------------------------
* **`fatal error: 'stdint.h' file not found`** – Ensure MSYS2 toolchain packages are installed and on the PATH.
* **`go: no Go files`** – Run commands from the project root (where `go.mod` lives).
* **`fyne: command not found`** – Reopen PowerShell so the updated PATH is recognized or append `%USERPROFILE%\go\bin` to the system PATH.
* **Installer builds but app will not launch** – Confirm that `Amazon Product Intelligence.exe` was freshly copied next to the `.iss` script before compiling.
* **Antivirus warnings** – New unsigned executables or installers may trigger SmartScreen; choose “More info → Run anyway” during testing or sign the binaries with a code-signing certificate for distribution.

------------------------------------------------------------
12. Next Steps
------------------------------------------------------------
* Customize icons by replacing the placeholders in the `assets` folder with your own `app.png` (at least 512×512) and `app.ico` (multiple sizes).
* Explore `docs/BUILD_WINDOWS.md` for concise developer-oriented build notes and advanced cross-compilation workflows.
* Review the source under `cmd/app` and `internal` to adapt the scraping workflows to your needs.

You now have everything required to build, install, and distribute the Amazon Product Intelligence Suite on Windows.
