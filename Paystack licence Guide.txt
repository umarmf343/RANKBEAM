RankBeam Paystack Licensing Blueprint
====================================

This guide describes the Paystack-backed licensing service that replaces the
legacy Go activation server. The new stack uses a Node.js API, a SQLite
backing store, and hardware fingerprints to bind every subscription to a single
machine. Keep this document close when configuring infrastructure, support
workflows, or debugging activations.

Contents
--------
1. System overview
2. Paystack configuration checklist
3. Service endpoints
4. Database schema
5. Environment variables
6. Local testing workflow
7. Desktop & installer requirements
8. Operations and maintenance

1. System overview
------------------
* `license-api/server.js` is the only licensing backend. It exposes REST
  endpoints for subscription checkout, webhook processing, validation, health
  checks, and device deactivation.
* Paystack handles all billing. The API creates a transaction via
  `/transaction/initialize` and encodes the generated licence key and hardware
  fingerprint inside the metadata payload.
* Every successful Paystack webhook (`subscription.create`, `charge.success`,
  `invoice.create`, `subscription.renew`) updates the SQLite database with the
  latest expiry timestamp (payment date + 30 days) and marks the licence as
  `active`.
* Desktop apps send three pieces of data to `/paystack/validate` on every
  launch: `licenseKey`, `email`, and the machine fingerprint. The API confirms
  the combination, checks the expiry window, and returns the canonical expiry
  date.
* Deactivations wipe the stored fingerprint so the end user can reactivate on a
  different computer after signing in again.

2. Paystack configuration checklist
-----------------------------------
1. Create a recurring subscription **plan** in the Paystack dashboard with the
   required monthly price. Capture the `plan` code (e.g. `PLN_xxxxxx`).
2. Navigate to **Settings → API Keys & Webhooks** and configure the production
   webhook URL: `https://<your-domain>/paystack/webhook`.
3. Copy the webhook signing secret and store it in `PAYSTACK_WEBHOOK_SECRET`.
4. Enable email collection on the checkout form. The API relies on
   `data.customer.email`.
5. (Optional) Add `metadata` fields for troubleshooting. The service already
   injects `licenseKey` and `fingerprint` so support can trace payments back to
   machines.

3. Service endpoints
--------------------
`server.js` exposes:

* `POST /paystack/subscribe`
  * Body: `{ email, fingerprint, planCode? }`
  * Generates a licence key, creates a Paystack transaction, stores a pending
    record, and returns the Paystack authorization URL plus the reference.
* `POST /paystack/validate`
  * Requires the shared token header (`X-License-Token`).
  * Body: `{ email, licenseKey, fingerprint }`
  * Confirms the subscription is active, the fingerprint matches, and returns
    `{ status: "valid", expiresAt }`.
* `POST /paystack/deactivate`
  * Requires the shared token header.
  * Clears the fingerprint so the licence can be reused on another device.
* `POST /paystack/webhook`
  * Expects a signed Paystack payload.
  * Processes subscription creation, renewals, and successful charges. Updates
    the licence expiry to payment timestamp + 30 days.
* `GET /health`
  * Basic JSON heartbeat: `{ status: "ok", timestamp: ... }`.

4. Database schema
------------------
The service uses SQLite via `better-sqlite3`. The `licenses` table stores one
row per licence key:

```
CREATE TABLE licenses (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_email TEXT NOT NULL,
  license_key TEXT NOT NULL UNIQUE,
  fingerprint TEXT,
  expires_at TEXT,
  paystack_reference TEXT,
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TEXT NOT NULL,
  updated_at TEXT NOT NULL
);
```

Status transitions:

* `pending` – customer started checkout, waiting for Paystack confirmation.
* `active` – paid and tied to a fingerprint.
* `expired` – expiry timestamp is in the past.
* `deactivated` – fingerprint cleared by the user or support.

A background cron job (or the included `clearExpiredFingerprints()` helper) can
periodically mark expired rows. Validation also promotes stale rows to
`expired` when the expiry window passes.

5. Environment variables
------------------------
Set these variables in production and testing (see `license-api/.env.example`):

```
PORT=8080
DATABASE_PATH=/home/<user>/license-api/data/licenses.db
PAYSTACK_SECRET_KEY=sk_live_xxx
PAYSTACK_PLAN_CODE=PLN_xxxxxx
PAYSTACK_WEBHOOK_SECRET=whsec_xxx
LICENSE_API_TOKEN=installer-shared-secret
```

* `PAYSTACK_SECRET_KEY` – used for the `transaction/initialize` call.
* `PAYSTACK_PLAN_CODE` – monthly subscription plan code.
* `PAYSTACK_WEBHOOK_SECRET` – Paystack signature verification.
* `LICENSE_API_TOKEN` – shared secret between installer, desktop app, and the
  validation API.
* `DATABASE_PATH` – absolute path to the SQLite database file.

6. Local testing workflow
-------------------------
1. Copy `license-api/.env.example` to `.env` and fill in sandbox credentials.
2. Install dependencies: `cd license-api && npm install`.
3. Start the API: `npm run dev` (or `npm start`).
4. Initiate a subscription:

```
curl -X POST http://localhost:8080/paystack/subscribe \
  -H "Content-Type: application/json" \
  -d '{"email":"tester@example.com","fingerprint":"TEST-FP-001"}'
```

   Capture the `authorizationUrl` and visit it with Paystack test cards.
5. Simulate a webhook (replace the signature with one generated using your test
   webhook secret):

```
payload='{"event":"charge.success","data":{"paid_at":"2024-01-01T12:00:00Z","reference":"TEST_REF","customer":{"email":"tester@example.com"},"metadata":{"licenseKey":"XYZ","fingerprint":"TEST-FP-001"}}}'
curl -X POST http://localhost:8080/paystack/webhook \
  -H "Content-Type: application/json" \
  -H "x-paystack-signature: $(printf "%s" "$payload" | openssl dgst -sha512 -hmac whsec_test | cut -d' ' -f2)" \
  -d "$payload"
```

6. Validate the licence:

```
curl -X POST http://localhost:8080/paystack/validate \
  -H "Content-Type: application/json" \
  -H "X-License-Token: installer-shared-secret" \
  -d '{"email":"tester@example.com","licenseKey":"XYZ","fingerprint":"TEST-FP-001"}'
```

   Response: `{ "status": "valid", "expiresAt": "2024-01-31T12:00:00Z" }`.

7. Desktop & installer requirements
-----------------------------------
* The desktop application now generates a SHA-256 hardware fingerprint (via the
  `github.com/denisbrodbeck/machineid` package). Activation sends the
  fingerprint with every validation call and caches it alongside the licence key
  and expiry in `%LOCALAPPDATA%\RankBeam\license.json` (or the XDG config
  directory on macOS/Linux).
* The activation dialog refuses to continue unless a fingerprint is available,
  ensuring each key is bound to one device at a time.
* The Windows installer must prompt for the licence key and email, then call
  `/paystack/validate` with the machine fingerprint before copying files.
* Environment variables required for packaging the desktop app:

```
LICENSE_API_URL=https://licensing.yourdomain.com
LICENSE_API_TOKEN=installer-shared-secret
```

8. Operations and maintenance
-----------------------------
* **Deployment**: Push the contents of `license-api/` to your server (or cPanel
  Node.js app). Run `npm install`, set the environment variables, and start the
  process with PM2, Passenger, systemd, or your host's process manager.
* **Backups**: Copy `data/licenses.db` daily. SQLite can be snapshotted by
  stopping the service or using the `.backup` command.
* **Monitoring**: Capture stdout/stderr logs. Look for `invalid signature` or
  `fingerprint mismatch` events, which usually indicate tampering attempts or
  users trying to reuse licences.
* **Deactivation workflow**: Offer a simple dashboard or support command that
  calls `POST /paystack/deactivate` with the licence key. Once the fingerprint
  clears, the customer can reactivate on another machine.
* **Cron jobs**: Schedule a task (e.g. hourly) that curls
  `https://<your-domain>/health` to confirm the API responds. Optionally run a
  script that triggers `clearExpiredFingerprints()` (see `server.js`) if you
  prefer an external expiry sweep.
* **Security**: Treat `LICENSE_API_TOKEN` like a password. Rotate it if the
  installer leaks, and redeploy the desktop app with the new token.

This blueprint supersedes all Go-based licensing documentation. Follow it to
keep RankBeam activations in sync with Paystack subscriptions and to maintain a
secure, hardware-bound entitlement system.
