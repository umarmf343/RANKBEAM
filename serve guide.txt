RankBeam License Server Quickstart (Paystack Edition)
====================================================

This beginner-friendly note explains how to run the updated RankBeam license
server, connect it to Paystack subscriptions, and test license validation end to
end. Read `Paystack licence Guide.txt` for full operational checklists; use this
file when you just need a high-level walkthrough.

1. What the license server does
-------------------------------
* Listens for Paystack webhooks at `POST /api/v1/paystack/webhook`.
* Stores license rows in `data/licenses.db` with fields: license key, customer
  email, Paystack transaction reference, expiry timestamp (30 days from the
  payment date), and audit timestamps.
* Validates licenses via `POST /api/v1/licenses/validate` using the key + email
  combination. Hardware fingerprints are no longer required.

2. Configure the server locally
-------------------------------
Create a `.env` file inside the `server/` directory with your development values:

```dotenv
LICENSE_BIND_ADDR=:8080
LICENSE_DB_PATH=data/licenses.db
LICENSE_API_TOKEN=dev-installer-token
PAYSTACK_WEBHOOK_SECRET=whsec_test_secret
```

Run the API:

```bash
cd server
go run .
```

You should see `license server listening on :8080`.

3. Simulate a Paystack webhook
------------------------------
With the server running, post a fake successful payment event. The body must
match Paystack’s JSON structure and include `customer.email`, `reference`, and
`data.paid_at`.

```bash
curl -X POST http://localhost:8080/api/v1/paystack/webhook \
  -H "Content-Type: application/json" \
  -H "x-paystack-signature: $(printf 'test' | openssl dgst -sha512 -hmac whsec_test_secret | cut -d' ' -f2)" \
  -d '{
        "event": "charge.success",
        "data": {
          "reference": "PSK_demo_001",
          "paid_at": "2024-11-01T12:00:00Z",
          "customer": {"email": "buyer@example.com"}
        }
      }'
```

The response includes a freshly minted license key and its expiry date.

4. Validate the stored license
------------------------------
Call the validation endpoint with the license key from the previous step:

```bash
curl -X POST http://localhost:8080/api/v1/licenses/validate \
  -H "Content-Type: application/json" \
  -H "X-Installer-Token: dev-installer-token" \
  -d '{"licenseKey":"<KEY_FROM_WEBHOOK>","email":"buyer@example.com"}'
```

Expected response:

```json
{"status":"valid"}
```

If you supply an expired or mismatched key/email, the API returns `401`.

5. Deploying to production
--------------------------
* Cross-compile the binary for Linux: `GOOS=linux GOARCH=amd64 go build -o build/license-server ./server`.
* Upload the binary plus `.env` file to your server or hosting account.
* Ensure the process runs with write access to the directory that holds
  `data/licenses.db`.
* Expose the binary behind HTTPS (NGINX, cPanel Application Manager, or any
  reverse proxy works).
* Configure Paystack Dashboard → **Settings → API Keys & Webhooks** to send
  successful subscription events to your public webhook URL.

6. Ongoing maintenance tips
---------------------------
* Back up `data/licenses.db` weekly. A simple tarball copied off the server is
  enough because SQLite is self-contained.
* Rotate `PAYSTACK_WEBHOOK_SECRET` and `LICENSE_API_TOKEN` periodically; update
  the environment and restart the service.
* Monitor logs for `invalid signature` or `license expired` messages—they often
  point to billing issues that need follow-up with the subscriber.

With these steps you have a working Paystack-integrated licensing backend that
the desktop app and installer can trust.
