RankBeam Licensing API Quickstart
================================

Use this fast-start checklist to spin up the new Node.js licensing service,
connect it to Paystack, and test activations from end to end. For deeper
operational details see `Paystack licence Guide.txt`.

1. What the licensing API does
------------------------------
* `license-api/server.js` boots an Express app that exposes:
  * `POST /paystack/subscribe` – generate a licence key, create a Paystack
    checkout session, and store a pending record.
  * `POST /paystack/webhook` – accept signed Paystack events, activate licences,
    and set expiry to payment timestamp + 30 days.
  * `POST /paystack/validate` – confirm `email + licenseKey + fingerprint` are
    in good standing and return the current expiry.
  * `POST /paystack/deactivate` – clear the fingerprint so the user can move to
    another machine.
  * `GET /health` – lightweight heartbeat endpoint.
* Licences are persisted in `license-api/data/licenses.db` (SQLite) using the
  `better-sqlite3` driver. Fingerprints are required for every validation.

2. Configure the service locally
--------------------------------
1. Copy `license-api/.env.example` to `license-api/.env` and fill in sandbox
   keys.
2. Install dependencies and start the watcher:

```bash
cd license-api
npm install
npm run dev
```

   The console prints `RankBeam licensing API listening on port 8080`.

3. Start a subscription checkout
--------------------------------
Trigger the `subscribe` endpoint with a test email and fingerprint:

```bash
curl -X POST http://localhost:8080/paystack/subscribe \
  -H "Content-Type: application/json" \
  -d '{"email":"buyer@example.com","fingerprint":"DEV-FP-001"}'
```

The JSON response includes `authorizationUrl`, `reference`, and `licenseKey`.
Open the authorization URL in a browser and complete the Paystack sandbox
payment (use the default test card 4084 0840 8408 4081 / 408). Paystack will hit
your local webhook if you use a tunnelling tool such as `ngrok`.

4. Simulate a webhook manually (optional)
----------------------------------------
If you prefer not to tunnel, craft a fake webhook payload and sign it with your
sandbox secret:

```bash
payload='{"event":"charge.success","data":{"paid_at":"2024-11-01T12:00:00Z","reference":"TEST_REF_001","customer":{"email":"buyer@example.com"},"metadata":{"licenseKey":"DEV-LIC-001","fingerprint":"DEV-FP-001"}}}'
curl -X POST http://localhost:8080/paystack/webhook \
  -H "Content-Type: application/json" \
  -H "x-paystack-signature: $(printf "%s" "$payload" | openssl dgst -sha512 -hmac $PAYSTACK_WEBHOOK_SECRET | cut -d' ' -f2)" \
  -d "$payload"
```

The API responds with `{ "status": "processed", ... }` and updates the SQLite
record to `active`.

5. Validate the licence from the desktop/installer perspective
-------------------------------------------------------------
Call the validation endpoint using the shared token and the hardware
fingerprint:

```bash
curl -X POST http://localhost:8080/paystack/validate \
  -H "Content-Type: application/json" \
  -H "X-License-Token: installer-shared-secret" \
  -d '{"email":"buyer@example.com","licenseKey":"DEV-LIC-001","fingerprint":"DEV-FP-001"}'
```

Expected response:

```json
{"status":"valid","expiresAt":"2024-12-01T12:00:00Z"}
```

6. Deploying to production or cPanel
------------------------------------
* Upload the `license-api/` folder to your server.
* Run `npm install --production` and ensure the process has write access to
  `data/`.
* Configure environment variables (see `license-api/.env.example`).
* Start the app with your preferred process manager (PM2, systemd, cPanel
  Application Manager/Passenger). Point your HTTPS reverse proxy to the chosen
  port.
* Register the webhook URL in Paystack → **Settings → API Keys & Webhooks**.

7. Maintenance tips
-------------------
* Back up `data/licenses.db` frequently; it contains the licence ledger.
* Rotate `LICENSE_API_TOKEN` if a build leaks. Update the desktop app/installer
  before flipping the value in production.
* Provide support staff with a small script or API client that calls
  `POST /paystack/deactivate` so customers can move to new devices.
* Monitor logs for `invalid signature`, `fingerprint mismatch`, or `subscription
  expired` responses—they often indicate billing issues that need follow-up.

Follow these steps to keep the RankBeam activation flow tightly aligned with the
new Paystack-powered licensing backend.
